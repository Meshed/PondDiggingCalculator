#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Get paths
const configDir = __dirname;
const configPath = path.join(configDir, 'equipment-defaults.json');
const frontendDir = path.join(configDir, '..', 'frontend');
const outputPath = path.join(frontendDir, 'src', 'Utils', 'ConfigGenerated.elm');

console.log('🔧 Generating Elm configuration module...');

try {
  // Load and parse configuration
  const configJson = fs.readFileSync(configPath, 'utf8');
  const config = JSON.parse(configJson);

  // Generate Elm module content
  const elmModule = generateElmModule(config);

  // Write to output file
  fs.writeFileSync(outputPath, elmModule, 'utf8');

  console.log('✅ Generated Elm configuration module:');
  console.log(`   Output: ${outputPath}`);
  console.log(`   Version: ${config.version}`);
  console.log(`   Excavators: ${config.defaults.excavators.length}`);
  console.log(`   Trucks: ${config.defaults.trucks.length}`);
} catch (error) {
  console.error('❌ Error generating Elm configuration:');
  console.error(error.message);
  process.exit(1);
}

function generateElmModule(config) {
  return `module Utils.ConfigGenerated exposing (staticConfig)

{-| Generated configuration module from build-time JSON
This module is automatically generated from /config/equipment-defaults.json
DO NOT EDIT THIS FILE MANUALLY - it will be overwritten at build time
-}



-- TYPE ALIASES (to avoid circular imports)


type alias Config =
    { version : String
    , defaults : Defaults
    , fleetLimits : FleetLimits
    , validation : ValidationRules
    }


type alias Defaults =
    { excavators : List ExcavatorDefaults
    , trucks : List TruckDefaults
    , project : ProjectDefaults
    }


type alias ExcavatorDefaults =
    { bucketCapacity : Float
    , cycleTime : Float
    , name : String
    }


type alias TruckDefaults =
    { capacity : Float
    , roundTripTime : Float
    , name : String
    }


type alias ProjectDefaults =
    { workHoursPerDay : Float
    , pondLength : Float
    , pondWidth : Float
    , pondDepth : Float
    }


type alias FleetLimits =
    { maxExcavators : Int
    , maxTrucks : Int
    }


type alias ValidationRules =
    { excavatorCapacity : ValidationRange
    , cycleTime : ValidationRange
    , truckCapacity : ValidationRange
    , roundTripTime : ValidationRange
    , workHours : ValidationRange
    , pondDimensions : ValidationRange
    }


type alias ValidationRange =
    { min : Float
    , max : Float
    }



-- STATIC CONFIGURATION


{-| Static configuration loaded at build time from JSON
-}
staticConfig : Config
staticConfig =
    { version = "${config.version}"
    , defaults = staticDefaults
    , fleetLimits = staticFleetLimits
    , validation = staticValidationRules
    }


staticDefaults : Defaults
staticDefaults =
    { excavators = staticExcavators
    , trucks = staticTrucks
    , project = staticProject
    }


staticExcavators : List ExcavatorDefaults
staticExcavators =
    [${config.defaults.excavators.map(excavator => `
        { bucketCapacity = ${excavator.bucketCapacity}
        , cycleTime = ${excavator.cycleTime}
        , name = "${excavator.name}"
        }`).join(',')}
    ]


staticTrucks : List TruckDefaults
staticTrucks =
    [${config.defaults.trucks.map(truck => `
        { capacity = ${truck.capacity}
        , roundTripTime = ${truck.roundTripTime}
        , name = "${truck.name}"
        }`).join(',')}
    ]


staticProject : ProjectDefaults
staticProject =
    { workHoursPerDay = ${config.defaults.project.workHoursPerDay}
    , pondLength = ${config.defaults.project.pondLength}
    , pondWidth = ${config.defaults.project.pondWidth}
    , pondDepth = ${config.defaults.project.pondDepth}
    }


staticFleetLimits : FleetLimits
staticFleetLimits =
    { maxExcavators = ${config.fleetLimits.maxExcavators}
    , maxTrucks = ${config.fleetLimits.maxTrucks}
    }


staticValidationRules : ValidationRules
staticValidationRules =
    { excavatorCapacity = { min = ${config.validation.excavatorCapacity.min}, max = ${config.validation.excavatorCapacity.max} }
    , cycleTime = { min = ${config.validation.cycleTime.min}, max = ${config.validation.cycleTime.max} }
    , truckCapacity = { min = ${config.validation.truckCapacity.min}, max = ${config.validation.truckCapacity.max} }
    , roundTripTime = { min = ${config.validation.roundTripTime.min}, max = ${config.validation.roundTripTime.max} }
    , workHours = { min = ${config.validation.workHours.min}, max = ${config.validation.workHours.max} }
    , pondDimensions = { min = ${config.validation.pondDimensions.min}, max = ${config.validation.pondDimensions.max} }
    }
`;
}